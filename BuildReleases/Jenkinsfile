pipeline {
    agent { label "OneS" }

    parameters {
        choice(name: 'product', choices: ['Fitness_CORP', 'Stomatology'], description: 'Выберите продукт')
        string(defaultValue: "4.0.54.1", description: 'Старая версия', name: 'oldversion_1')
        string(defaultValue: "4.0.55.1", description: 'Новая версия', name: 'newversion_1')
        string(defaultValue: "8.3.24.1368", description: 'Версия платформы 1с', name: 'platformversion_1')
        string(defaultValue: "3.0.37.11710", description: 'Версия СЛК', name: 'slkversion')
    }
	environment {
        FOLDERS_TEMP = "D:\\RELEASES\\${params.product}"
        FOLDERS_OLDVERSION = "${env.FOLDERS_TEMP}\\OldVersion"
        FOLDERS_SCRIPTS = "${env.FOLDERS_TEMP}\\Scripts"
        FOLDERS_PACKAGE = "${env.FOLDERS_TEMP}\\Package"
        FOLDERS_BUILD = "${env.FOLDERS_TEMP}\\Build"
        sample = "C:\\automation\\sample\\${params.product}"
        sampleEdf = "${env.WORKSPACE}\\BuildReleases\\edf\\${params.product}"
        target_path = "${env.FOLDERS_TEMP}\\${params.product}"
        packageFull = "${env.FOLDERS_PACKAGE}\\full"
        packageUpdate = "${env.FOLDERS_PACKAGE}\\updates"

    }
    stages {
        stage('Инициализация параметров') {
            steps {
                script {
                    if (params.product.equalsIgnoreCase('Fitness_CORP')) {
                        env.serie = "5415"
                        env.extNameMess = "Мессенджер"
                        env.releaseBase = "VAFitness"
                        env.repository = "http://192.168.2.16/hran1c/repository.1ccr/fitness_release"
                        env.repositoryMess = "http://192.168.2.16/hran1c/repository.1ccr/fitness4_messenger_release"
                        env.buildBase = "FitnessCorpSborka"
                        env.buildUser = "Администратор БД"
                        env.edfFull = "Комплект поставки.edf"
                        env.edfUpdate = "Файл описания комплекта поставки.edf"
                        env.nameDistr = "Fitness"

                    } else if (params.product.equals('Stomatology')) {
                        env.serie = "4FB1"
                        env.extNameMess = "Мессенджер_Стоматология"
                        env.extNameShedule = "ЖурналЗаписи_Стоматология"
                        env.releaseBase = "VAStoma"
                        env.repository = "http://192.168.2.16/hran1c/repository.1ccr/stomatology2_release"
                        env.repositoryMess = "http://192.168.2.16/hran1c/repository.1ccr/stomatology2_messenger_release"
                        env.repositoryShedule = "http://192.168.2.16/hran1c/repository.1ccr/stomatology2_shedule"
                        env.buildBase = "StomaSborka"
                        env.buildUser = "Николаев Лев (Полные права)"
                        env.edfFull = "1С_Медицина_21_Внутренний_КомплектПоставки.edf"
                        env.edfUpdate = "Файл описания комплекта поставки.edf"
                        env.nameDistr = "Стоматологическая клиника"
                    } else {
                        error "Неизвестный продукт: ${params.product}. Ожидается 'Fitness' или 'Stomatology'."
                    }
                }
            }
        }
        stage('Обновление документации') {
            steps {
                script {
                    sh "python -X utf8 BuildReleases/config/delete_folders_and_files.py \"${env.target_path}\" \"${env.FOLDERS_PACKAGE}\" \"${env.FOLDERS_BUILD}\""
                    sh "python -X utf8 BuildReleases/config/update_files_and_contents.py \"${env.sample}\" \"${env.target_path}\" \"${params.oldversion_1}\" \"${params.newversion_1}\" \"${params.platformversion_1}\" \"${params.slkversion}\" \"${env.FOLDERS_BUILD}\""
                    sh "python -X utf8 BuildReleases/config/process_files.py \"${params.oldversion_1}\" \"${params.newversion_1}\" \"${env.sampleEdf}\" \"${env.FOLDERS_SCRIPTS}\""
                }
            }
        }
        // stage("Обновление конфигурации из релизного хранилища") {
        //     steps{
        //         script {
        //             // СЕАНСЫ ЗАБЛОКИРОВАНЫ БАЗА - releaseBase
		// 			bat """
		// 			chcp 65001
		// 			@call vrunner session kill --db ${env.releaseBase} --db-user Админ --uccode BUILDER
		// 			@call vrunner loadrepo --storage-name ${env.repository} --storage-user ${env.VATest2} --ibconnection /Slocalhost/${env.releaseBase} --db-user Админ --uccode BUILDER
		// 			@call vrunner updatedb --ibconnection /Slocalhost/${env.releaseBase} --db-user Админ --uccode BUILDER
        //             """
        //         } 
        //     }
        // }
        // stage("Обновление расширений") {
        //     steps{  
        //         echo "Обновление мессенджера"
        //         script {
        //             bat """
        //             chcp 65001
        //             @call vrunner loadrepo --storage-name ${env.repositoryMess} --storage-user МихаилБ --extension ${env.extNameMess} --ibconnection /Slocalhost/${env.releaseBase} --db-user Админ --uccode BUILDER
        //             @call vrunner updateext ${env.extNameMess} --ibconnection /Slocalhost/${env.releaseBase} --db-user Админ --uccode BUILDER
        //             """
        //         }
        //         echo "Обновление журнала записи"
        //         script{
        //             if (params.product == 'Stomatology'){
        //                 bat """
        //                 chcp 65001
        //                 @call vrunner loadrepo --storage-name ${env.repositoryShedule} --storage-user МихаилБ --extension ${env.extNameShedule} --ibconnection /Slocalhost/${env.releaseBase} --db-user Админ --uccode BUILDER
        //                 @call vrunner updateext ${env.extNameShedule} --ibconnection /Slocalhost/${env.releaseBase} --db-user Админ --uccode BUILDER
        //                 """
        //             } else{
        //                 echo "Шаг 2 пропущен, так как не Стоматология"
        //             }
        //         }
        //     }
        // }
        // stage("Выгрузка из хранилища") {
        //     steps{
        //         echo "Выгрузка конфигурации"
        //         // script {
        //         //     // bat """
        //         //     // chcp 65001
        //         //     // @call vrunner unload ${env.FOLDERS_SCRIPTS}\\1Cv8.cf --ibconnection /Slocalhost/${env.releaseBase} --db-user Админ --uccode BUILDER
        //         //     // """
        //         // }
        //         echo "Выгрузка расширений"
        //         script{
        //             if (params.product == 'Stomatology') {
        //                 bat """
        //                 chcp 65001
        //                 @call vrunner unloadext ${env.FOLDERS_SCRIPTS}\\jurnal.cfe ${env.extNameShedule} --ibconnection /Slocalhost/${env.releaseBase} --db-user Админ --uccode BUILDER
        //                 """
		// 			} else{
        //                 echo "Шаг пропущен, так как не Стоматология"
        //             }
        //             bat"""
        //             chcp 65001
        //             @call vrunner unloadext ${env.FOLDERS_SCRIPTS}\\messenger.cfe ${env.extNameMess} --ibconnection /Slocalhost/${env.releaseBase} --db-user Админ --uccode BUILDER
        //             @call vrunner session unlock --db ${env.releaseBase} --db-user Админ
        //             """
        //             // СЕАНСЫ РАЗБЛОКИРОВАНЫ
        //         }
        //     }
        // }
        // stage('Шифрование расширения') {
        //     when { expression {params.product.contains('Stomatology') } }
        //     steps {
        //         script{
        //             bat """
        //             start ${env.FOLDERS_TEMP}\\Netlenka1c\\Netlenka1C.exe --mode=prof --source ${env.FOLDERS_SCRIPTS}\\jurnal.cfe --createpdb
        //             exit
        //             """
        //         }
        //     }
        // }
        // stage('Загрузка .cf в базу для сборки релиза') {
        //     steps {
        //         script { 
        //             // СЕАНСЫ ЗАБЛОКИРОВАНЫ БАЗА - buildBase
        //             bat """
        //             chcp 65001
        //             @call vrunner session kill  --db ${env.buildBase} --db-user "${env.buildUser}" --uccode BUILDER
        //             @call vrunner load --src ${env.FOLDERS_SCRIPTS}\\1Cv8.cf --ibconnection /Slocalhost/${env.buildBase} --db-user "${env.buildUser}" --uccode BUILDER
        //             @call vrunner updatedb --ibconnection /Slocalhost/${env.buildBase} --db-user "${env.buildUser}" --uccode BUILDER
        //             """
        //         }   
        //     }
        // }
        // stage("Обновление базы в режиме 1С:Предприятие") {
        //     steps {
        //         script{
        //             bat """
        //             chcp 65001
        //             @call vrunner run --command ЗавершитьРаботуСистемы; --ibconnection /Slocalhost/${env.buildBase} --db-user "${env.buildUser}" --execute "${env.epfvrunner}\\ЗакрытьПредприятие.epf" --uccode BUILDER
        //             @call vrunner run --ibconnection /Slocalhost/${env.buildBase} --db-user "${env.buildUser}" --execute "${env.epfvrunner}\\УбратьОкноПеремещенияИБ.epf" --uccode BUILDER
        //             @call vrunner session unlock --db ${env.buildBase} --db-user "${env.buildUser}"
        //             """
        //             // СЕАНСЫ РАЗБЛОКИРОВАНЫ
        //         }
        //     }
        // }
        // stage('Пауза') {
        //     steps {
        //        script{
        //            // def messageText = """Сборка приостановлена. Необходимо создать внешнюю обработку, удалить Helix и fresh, выгрузить идентификатор"""
        //           //  def response = httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messageText, 'UTF-8')}")
        //             // Вручную запрашиваем продолжение пайплайна
        //             input 'Продолжить выполнение пайплайна?'
        //         }
        //     }
        // }
        // stage("Загрузка расширений и СЛК") {
        //     steps {
        //         script {
        //             def loadexmes = 'BuildReleases/config/loadext.py'
        //             def compiledatafile = 'BuildReleases/config/compiledatafile.py'
        //             def zip = 'BuildReleases/config/zip.py'
        //             def source_file
        //             def template_name
                    
        //             if (params.product.contains('Stomatology')) {
        //                 echo "Загрузка расширения журнала записи"
        //                 source_file = "${env.FOLDERS_SCRIPTS}\\Protected\\jurnal.cfe"
        //                 template_name = "РасширениеЖурналаЗаписи"
        //                 sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${env.buildBase}\" \"${env.buildUser}\" \"${template_name}\""
                    
        //             }

        //             echo  "Загрузка расширения мессенджера"
        //             source_file = "${env.FOLDERS_SCRIPTS}\\messenger.cfe"
        //             template_name = "РасширениеМессенджера"
        //             sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${env.buildBase}\" \"${env.buildUser}\" \"${template_name}\""
        //             echo "Загрузка компоненты СЛК в макет 'КомпонентаСЛК'"
        //             source_file = "${env.FOLDERS_SCRIPTS}\\licenceaddin-${params.slkversion}-template.zip"
        //             template_name = "КомпонентаСЛК"
        //             sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${env.buildBase}\" \"${env.buildUser}\" \"${template_name}\""
        //             echo "Создание файла .datafile"
        //             sh "python -X utf8 ${compiledatafile} \"${env.FOLDERS_SCRIPTS}\" \"${env.serie}\""
        //             echo "Загрузка .datafile в макет 'ОбъектыСЛК'"
        //             source_file = "${env.FOLDERS_SCRIPTS}\\${env.serie}.datafile"
        //             template_name = "ОбъектыСЛК"
        //             sh "python -X utf8 ${loadexmes} \"${source_file}\" \"${env.platformPath}\" \"${env.buildBase}\" \"${env.buildUser}\" \"${template_name}\""
        //             echo  "Создание файла 4FB1.zip"
        //             sh "python -X utf8 ${zip} \"${env.FOLDERS_SCRIPTS}\" \"${env.target_path}\" \"${env.serie}\""
        //         }
        //     }
        // }
        stage('Основная поставка') {
            steps {
                retry(2){
                    script {
                        bat """
                        chcp 65001
                        "${env.platformPath}" DESIGNER /Slocalhost/${env.buildBase} /N"${env.buildUser}" /CreateDistributivePackage"${env.packageFull}" -File"${env.FOLDERS_SCRIPTS}\\${env.edfFull}" -PackageFileName setup.zip -Option"Основная поставка"
                        """
                        def unzipping = 'BuildReleases/config/unzipping.py'                    // Разархивирование
                        bat "python -X utf8 ${unzipping} ${env.packageFull}"
                        def install = 'BuildReleases/config/install.py'                        // Установка
                        bat "python -X utf8 ${install} ${env.packageFull}"
                    }
                }
            }
        }
        stage("Выгрзка файла .cfu") {
            steps {
                script{
                    bat """
                    chcp 65001
                    "${env.platformPath}" DESIGNER /Slocalhost/${env.buildBase} /N"${env.buildUser}" /CreateDistributionFiles -cfufile ${env.FOLDERS_BUILD}\\Update\\1Cv8.cfu -f ${env.FOLDERS_OLDVERSION}\\${oldversion_1}.cf
                    """
                }
            }
         }
        stage('Поставка обновления') {
            steps {
                script {
                    bat """
                    chcp 65001
                    "${env.platformPath}" DESIGNER /Slocalhost/${env.buildBase} /N"${env.buildUser}" /CreateDistributivePackage"${env.packageUpdate}" -File"${env.FOLDERS_SCRIPTS}\\${env.edfUpdate}" -PackageFileName update.zip -Option"Поставка обновления"
                    """
                    def unzippingupdate = 'BuildReleases/config/unzippingupdate.py'           // Разархивирование
                    bat "python -X utf8 ${unzippingupdate} ${env.packageUpdate}"
                    def installupdate = 'BuildReleases/config/installupdate.py'               // Установка
                    bat "python -X utf8 ${installupdate} ${env.packageUpdate}"
                }
            }
        }
        stage('Создание архива дистрибутива') {
            steps {
                script {
                    def perenos = 'BuildReleases/config/Perenos.py'
                    sh "python -X utf8 ${perenos} \"${newversion_1}\" \"${env.target_path}\" \"${env.packageFull}\" \"${env.FOLDERS_OLDVERSION}\" \"${packageUpdate}\" \"${env.FOLDERS_SCRIPTS}\" \"${params.product}\" \"${env.edfUpdate}\" \"${env.FOLDERS_TEMP}\" \"${env.nameDistr}\""
                    // def messagefinish = "Сборка «${params.product}» успешно завершена."            // Отправка сообщения в Telegram
                    // def response = httpRequest(url: "https://api.telegram.org/bot${env.botToken}/sendMessage?chat_id=${env.chatId}&text=${URLEncoder.encode(messagefinish, 'UTF-8')}"
                    // )
                }
            }
        }
     }
}
