pipeline {
    agent {
        label "OneS"
    }
    parameters {
        string(name: 'PRODUCT', defaultValue: '', description: 'Product name (e.g., fitness, salon, stoma)')
        string(name: 'SERVICES', defaultValue: '', description: 'List of services separated by semicolons (e.g., frontend-fitness-dev;backend-fitness-dev)')
    }
    stages {
        stage('Подготовка .cf') {
                steps {
                    script {
                        if (params.PRODUCT == 'fitness') {
                        env.testPathPlaceholder = "\\tests\\features\\fitness" // debug - тестовые запуски
                        env.repository = "${repositoryReleaseFitness}"
                        env.dbTests = "VAFitness"
                        updateConfigFile()

                        } else if (params.PRODUCT == 'salon') {
                        env.testPathPlaceholder = "\\tests\\features\\salon" // test - тестовые запуски
                        env.repository = "${repositoryReleaseSalon}"
                        env.dbTests = "VASPA"
                        updateConfigFile()

                        } else {
                        env.testPathPlaceholder = "\\tests\\features\\stoma"
                        env.repository = "${repositoryReleaseStom}"
                        env.dbTests = "VAStoma"
                        updateConfigFile()
                    }
                }
            }
        }
        // stage('Обновление из релизного хранилища'){
        //     steps{
        //         script{
        //             bat"""
        //             chcp 65001 
        //             @call vrunner session kill --db ${env.dbTests} --db-user Админ --uccode BUILDER
        //             call vrunner loadrepo --storage-name ${env.repository} --storage-user ${env.VATest2} --ibconnection /Slocalhost/${env.dbTests} --db-user Админ --uccode BUILDER
        //             call vrunner updatedb --ibconnection /Slocalhost/${env.dbTests} --db-user Админ --uccode BUILDER
        //             @call vrunner session unlock --db ${env.dbTests} --db-user Админ
        //             """
        //         }
        //     }
        // }
		// // stage('Выгрузка из релизного') {
		// // 	steps {
		// // 		bat """
		// // 		chcp 65001
		// // 		@call vrunner decompile --out Sonar/src/cf --current --ibconnection /Slocalhost/${env.dbTests} --db-user Админ
		// // 		"""
		// // 	}
		// // }

        // stage('Сценарное тестирвоание') {
        //     steps {
        //         script {
        //             try{
        //                 bat"""
        //                 chcp 65001
        //                 del /s /q "${env.WORKSPACE}\\tests\\build\\results" & rmdir /s /q "${env.WORKSPACE}\\tests\\build\\results"
        //                 call vrunner vanessa --path "${env.WORKSPACE}${env.testPathPlaceholder}" --vanessasettings "debug/VAParams.json" --workspace tests --pathvanessa ${env.pathvanessa} --additional "/DisplayAllFunctions /L ru" --ibconnection /Slocalhost/${env.dbTests} --db-user Админ
        //                 """                                                                                                                                
        //              } catch (Exception Exc) {
        //                 echo "Error occurred: ${Exc.message}"
        //                 currentBuild.result = 'UNSTABLE'
        //               }
        //         }
        //     }
        // }
    	stage('SonarScanner') {
			steps {
				script {
					scannerHome = tool 'sonar-scanner'
					echo "${scannerHome}"
				}
				withSonarQubeEnv('SonarScanner') {
				bat "D:\\SonarQube\\bin\\sonar-scanner.bat -D project.settings=/tests/Sonar/sonar-project.properties -D sonar.login=squ_c8227525d4b620d70d060064c066637325052602"
				}
			}
		}
    }
    post {
        always {
            script {
                allure includeProperties: false, jdk: '', results: [[path: 'tests/build/results']]
                junit allowEmptyResults: true, testResults: 'tests/build/out/jUnint/*.xml'
                // Отправка уведомлений только при SUCCESS или UNSTABLE
                if (currentBuild.currentResult == "SUCCESS" || currentBuild.currentResult == "UNSTABLE") {
                    if ("${params.PRODUCT}" == "fitness") {
                        env.logo = "tests/notifications/logo.png"
                    }
                    else if ("${params.PRODUCT}" == "salon") {
                        env.logo = "tests/notifications/logo1.png"
                    }
                    else if ("${params.PRODUCT}" == "stoma") {
                        env.logo = "tests/notifications/logo2.png"
                    }

                    def allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
                    def configJson = readFile(file: 'tests/notifications/config.json')
                    def updatedConfigJson = configJson
                        .replace('"${allureReportUrl}"', "\"${allureReportUrl}\"")
                        .replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
                        .replace('"${logo}"', "\"${env.logo}\"")
                    writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)

                    try {
                        bat """java "-DconfigFile=tests/notifications/config.json" "-Dhttp.connection.timeout=60000" "-Dhttp.socket.timeout=120000" -jar tests/notifications/allure-notifications-4.8.0.jar"""
                    }
                    catch (Exception e) {
                        echo "Ошибка при отправке уведомления: ${e.message}. Продолжаем выполнение pipeline."
                    }
                }
            }
        }
     }
}

def updateConfigFile() {
    def configJson = readFile(file: 'tests/debug/VAParams.json')
    def escapedWorkspace = env.WORKSPACE.replace("\\", "\\\\").replace("\\", "\\\\")
    
    // Разбиваем SERVICES и формируем список элементов в кавычках
    def servicesList = params.SERVICES.split('[;,]').collect { "\"${it.trim()}\"" }
    
    // Формируем строку для замены (без квадратных скобок)
    def servicesReplacement = servicesList.join(",")
    
    // Заменяем плейсхолдеры
    def updatedConfigJson = configJson
        .replaceAll(/\$\{product\}/, params.PRODUCT)
        .replaceAll(/\$\{workspace\}/, escapedWorkspace)
        .replaceAll(/\$\{dbTests\}/, env.dbTests)
        .replaceAll(/"\$\{SERVICES\}"/, servicesReplacement)  // Заменяем "${SERVICES}" на элементы через запятую
    
    writeFile(file: 'tests/debug/VAParams.json', text: updatedConfigJson)
}   // Формируем строку для замены (без квадратных скобок)
  