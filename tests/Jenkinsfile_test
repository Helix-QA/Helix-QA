pipeline {
    agent {
        label "OneS"
    }
	environment {
        InitDatabase = "tests/scripts/InitDatabase.bat"
		dbTests = "avtotestqa"
    }
    stages {
		stage('Подготовка .cf') {
				steps {
					script {
						updateConfigFile()
						
						if (params.product == 'fitness') {	
						env.testPathPlaceholder = "\\tests\\features\\fitness${params.debug}" // debug - тестовые запуски
						env.repository = "${repositoryReleaseFitness}"
						env.extmess = "http://192.168.2.16/hran1c/repository.1ccr/fitness4_messenger_release"
						env.extNameMess = "Мессенджер"
						} 
						
						else if (params.product == 'salon') {
						env.testPathPlaceholder = "\\tests\\features\\salon${params.debug}" // test - тестовые запуски
						env.repository = "${repositoryReleaseSalon}"
						env.extmess== "http://192.168.2.16/hran1c/repository.1ccr/salon_messenger_release"
						extNameMess= "Мессенджер_СалонКрасоты"
						} 

						else {	
						env.testPathPlaceholder = "\\tests\\features\\stoma${params.debug}"
						env.repository = "${repositoryReleaseStom}"
						env.extmess = "http://192.168.2.16/hran1c/repository.1ccr/stomatology2_messenger_release"
						env.extNameMess = "Мессенджер_Стоматология"
					}
				}
			}
		}
		stage('Выгрузка XML') {
			steps {
				bat """
				chcp 65001
				@call vrunner decompile --out tests/Sonar/${params.product}/src/cf --current --ibconnection /Slocalhost/${env.dbTests} --db-user Админ --uccode tester
				"""
			}
		}
		stage('Запуск Coverage41C') {
			steps {
				bat "start coverage41c start -i ${env.dbTests} -s tests/Sonar/${params.product}/src/cf -o tests/Sonar/Coverage41C/coverage_${params.product}.xml"
			}
		}
        stage('Сценарное тестирвоание') {
            steps {
                script {
					try{
						bat"""call vrunner vanessa --path "${env.WORKSPACE}${env.testPathPlaceholder}" --vanessasettings "tools/VAParams.json" --workspace tests --pathvanessa ${env.pathvanessa} --additional "/DisplayAllFunctions /L ru" --ibconnection /Slocalhost/${env.dbTests} --db-user Админ"""																													
 					} catch (Exception Exc) {
						echo "Error occurred: ${Exc.message}"
						currentBuild.result = 'UNSTABLE'
          			}
                }
            }
		}
		stage('Остановка Coverage41C') {
			steps {
				bat "Coverage41C stop -i ${env.dbTests}"
			}
		}
		// stage('Sonar') {
		// 	steps{
		// 		withSonarQubeEnv('Sonar') {
		// 		//-D sonar.coverageReportPaths=tests/Sonar/Coverage41C/coverage_${params.product}.xml
		// 			bat """
		// 			chcp 65001
		// 			tests/Sonar/bin/sonar-scanner.bat ^
		// 			-D sonar.token=squ_407c5709f77dc3b5429392316b2d2da7386bd792 ^
		// 			-D sonar.projectVersion=${BUILD_ID} ^
		// 			-D sonar.projectKey=${params.product} ^
		// 			-D sonar.projectName=${params.product} ^
		// 			-D sonar.sources=tests/Sonar/${params.product}/src/cf ^
		// 			-D sonar.inclusions=tests/Sonar/${params.product}/src/**/*.bsl ^
		// 			-D sonar.coverageReportPaths=tests/Sonar/Coverage41C/coverage_${params.product}.xml
		// 			"""
		// 		}
		// 	}
		//}
    }
	post {
		always {
			script {
				allure([
					includeProperties: false,
					jdk: '',
					results: [['path': 'tests/build/results']]
				])
				// Отправка уведомлений только при SUCCESS или UNSTABLE
				if (currentBuild.currentResult == "SUCCESS" || currentBuild.currentResult == "UNSTABLE") {
					if ("${params.product}" == "fitness") {
						env.logo = "tests/notifications/logo.png"
					}
					else if ("${params.product}" == "salon") {
						env.logo = "tests/notifications/logo1.png"
					}
					else if ("${params.product}" == "stoma") {
						env.logo = "tests/notifications/logo2.png"
					}

					def allureReportUrl = "${env.JENKINS_URL}job/${env.JOB_NAME.replaceAll('/', '/job/')}/${env.BUILD_NUMBER}/allure"
					def configJson = readFile(file: 'tests/notifications/config.json')
					def updatedConfigJson = configJson
						.replace('"${allureReportUrl}"', "\"${allureReportUrl}\"")
						.replace('"${JOB_NAME}"', "\"${env.JOB_NAME}\"")
						.replace('"${logo}"', "\"${env.logo}\"")
					writeFile(file: 'tests/notifications/config.json', text: updatedConfigJson)

					try {
						bat """java "-DconfigFile=tests/notifications/config.json" "-Dhttp.connection.timeout=60000" "-Dhttp.socket.timeout=120000" -jar tests/notifications/allure-notifications-4.8.0.jar"""
					}
					catch (Exception e) {
						echo "Ошибка при отправке уведомления: ${e.message}. Продолжаем выполнение pipeline."
					}
				}
			}
		}
	 }
}

def runDbOperation(operation, params) {
		try {
			bat """
				chcp 65001
				@call ${env.InitDatabase} ${operation} ${params}
			"""
		} catch (Exception e) {
			echo "Ошибка при выполнении операции ${operation}: ${e.message}"
			throw e
		}
	}

def updateConfigFile() {
    def configJson = readFile(file: 'tests/tools/VAParams.json')
    def escapedWorkspace = env.WORKSPACE.replace("\\", "\\\\").replace("\\", "\\\\")
    def updatedConfigJson = configJson.replaceAll(/\$\{product\}/, params.product)
                              .replaceAll(/\$\{workspace\}/, escapedWorkspace)
    writeFile(file: 'tests/tools/VAParams.json', text: updatedConfigJson)
}
